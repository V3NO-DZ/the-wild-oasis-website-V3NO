services:
  postgres:
    image: postgres:16-alpine
    container_name: two-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: two
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 20
    volumes:
      - pg-data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    container_name: two-redis
    ports:
      - "6379:6379"
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - redis-data:/data

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: two-backend
    environment:
      NODE_ENV: production
      PORT: 4000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/two?schema=public
      REDIS_URL: redis://redis:6379
      CORS_ORIGIN: http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "4000:4000"

  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    container_name: two-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:4000/api
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: please-change-me
      GOOGLE_CLIENT_ID: your-google-client-id
      GOOGLE_CLIENT_SECRET: your-google-client-secret
    depends_on:
      backend:
        condition: service_started
    ports:
      - "3000:3000"

volumes:
  pg-data:
  redis-data:
